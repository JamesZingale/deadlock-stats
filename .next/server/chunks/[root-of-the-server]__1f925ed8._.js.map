{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/James/Documents/deadlock-stats/src/app/lib/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nexport const db = mysql.createPool({\r\n  host: process.env.DB_HOST || '127.0.0.1',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root1',\r\n  database: process.env.DB_NAME || 'deadlock_stats',\r\n  port: Number(process.env.DB_PORT) || 3306\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,KAAK,8IAAK,CAAC,UAAU,CAAC;IACjC,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,MAAM,OAAO,QAAQ,GAAG,CAAC,OAAO,KAAK;AACvC","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/James/Documents/deadlock-stats/src/app/api/fetch-players/route.ts"],"sourcesContent":["import { db } from '../../lib/db';\r\n\r\nconst DEADLOCK_API_BASE = 'https://api.deadlock-api.com';\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Step 1: Get active matches\r\n    const matchesRes = await fetch(`${DEADLOCK_API_BASE}/v1/matches/active`);\r\n    if (!matchesRes.ok) {\r\n      console.error('Failed to fetch active matches:', matchesRes.status);\r\n      throw new Error('Failed to fetch active matches');\r\n    }\r\n    const matches = await matchesRes.json();\r\n\r\n    // Step 2: Collect up to 12 unique account IDs\r\n    const accountIds = new Set<number>();\r\n    for (const match of matches) {\r\n      if (match.players) {\r\n        for (const p of match.players) {\r\n          if (p.account_id) accountIds.add(p.account_id);\r\n          if (accountIds.size >= 12) break;\r\n        }\r\n      }\r\n      if (accountIds.size >= 12) break;\r\n    }\r\n\r\n    const accountIdList = Array.from(accountIds);\r\n    if (accountIdList.length === 0) {\r\n      throw new Error('No player IDs found');\r\n    }\r\n\r\n    console.log(`Found ${accountIdList.length} player IDs:`, accountIdList);\r\n\r\n    // Step 3: Fetch hero stats for all IDs\r\n    const heroStatsUrl = `${DEADLOCK_API_BASE}/v1/players/hero-stats?account_ids=${accountIdList.join(',')}`;\r\n    console.log('Fetching hero stats:', heroStatsUrl);\r\n\r\n    const heroStatsRes = await fetch(heroStatsUrl);\r\n    if (!heroStatsRes.ok) {\r\n      console.error('Hero stats fetch failed:', heroStatsRes.status, await heroStatsRes.text());\r\n      throw new Error('Failed to fetch hero stats');\r\n    }\r\n    const heroStats = await heroStatsRes.json();\r\n\r\n    // Step 4: Fetch Steam profiles for all IDs\r\n    const steamUrl = `${DEADLOCK_API_BASE}/v1/players/steam?account_ids=${accountIdList.join(',')}`;\r\n    console.log('Fetching steam profiles:', steamUrl);\r\n    const steamRes = await fetch(steamUrl);\r\n    const steamProfiles = steamRes.ok ? await steamRes.json() : [];\r\n\r\n    // Step 5: Map Steam usernames by ID\r\n    const usernameMap: Record<number, string> = {};\r\n    for (const profile of steamProfiles) {\r\n      usernameMap[profile.account_id] = profile.personaname || 'Unknown';\r\n    }\r\n\r\n    // Step 6: Aggregate stats and upsert into DB\r\n    const groupedStats: Record<number, { matches: number; wins: number }> = {};\r\n\r\n    for (const hero of heroStats) {\r\n      const id = hero.account_id;\r\n      if (!groupedStats[id]) groupedStats[id] = { matches: 0, wins: 0 };\r\n      groupedStats[id].matches += hero.matches_played || 0;\r\n      groupedStats[id].wins += hero.wins || 0;\r\n    }\r\n\r\n    for (const [idStr, stats] of Object.entries(groupedStats)) {\r\n      const accountId = Number(idStr);\r\n      const totalMatches = stats.matches;\r\n      const totalWins = stats.wins;\r\n      const totalLosses = totalMatches - totalWins;\r\n      const username = usernameMap[accountId] || 'Unknown';\r\n\r\n      console.log(`Inserting/updating player ${accountId}: ${username}`);\r\n\r\n      await db.query(\r\n        `INSERT INTO Players (player_id, username, total_matches_played, total_wins, total_losses)\r\n         VALUES (?, ?, ?, ?, ?)\r\n         ON DUPLICATE KEY UPDATE\r\n           username = VALUES(username),\r\n           total_matches_played = VALUES(total_matches_played),\r\n           total_wins = VALUES(total_wins),\r\n           total_losses = VALUES(total_losses)`,\r\n        [accountId, username, totalMatches, totalWins, totalLosses]\r\n      );\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true, count: Object.keys(groupedStats).length }), { status: 200 });\r\n  } catch (err: any) {\r\n    console.error(err);\r\n    return new Response(JSON.stringify({ success: false, error: err.message }), { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}