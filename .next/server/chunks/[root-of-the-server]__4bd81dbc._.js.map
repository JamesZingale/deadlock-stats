{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/James/Documents/deadlock-stats/src/app/lib/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nexport const db = mysql.createPool({\r\n  host: process.env.DB_HOST || '127.0.0.1',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root1',\r\n  database: process.env.DB_NAME || 'deadlock_stats',\r\n  port: Number(process.env.DB_PORT) || 3306\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,KAAK,8IAAK,CAAC,UAAU,CAAC;IACjC,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,MAAM,OAAO,QAAQ,GAAG,CAAC,OAAO,KAAK;AACvC","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/James/Documents/deadlock-stats/src/app/api/fetch-player-match-stats/route.ts"],"sourcesContent":["import { db } from '../../lib/db';\r\n\r\nconst DEADLOCK_API_BASE = 'https://api.deadlock-api.com/v1/sql';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const matchId = searchParams.get('match_id');\r\n    const accountId = searchParams.get('account_id');\r\n\r\n    if (!matchId || !accountId) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'Missing match_id or account_id' }),\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const query = encodeURIComponent(`\r\n      SELECT match_id, account_id, hero_id, net_worth, kills, deaths, assists, stats.player_damage,\r\n      stats.player_healing, won, team\r\n      FROM match_player\r\n      WHERE match_id = ${matchId} AND account_id = ${accountId}\r\n    `);\r\n\r\n    const url = `${DEADLOCK_API_BASE}?query=${query}`;\r\n    console.log('Fetching:', url);\r\n\r\n    const res = await fetch(url);\r\n    if (!res.ok) {\r\n      console.error('Deadlock API fetch failed:', res.status, await res.text());\r\n      throw new Error('Failed to fetch player match stats');\r\n    }\r\n\r\n    const stats = await res.json();\r\n\r\n    if (!Array.isArray(stats) || stats.length === 0) {\r\n      return new Response(\r\n        JSON.stringify({ success: false, error: 'No stats found for this player/match' }),\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const player = stats[0];\r\n    console.log('Player object:', JSON.stringify(player, null, 2));\r\n\r\n    // Extract final (latest) values from arrays\r\n    const finalDamage = Array.isArray(player['stats.player_damage'])\r\n      ? player['stats.player_damage'][player['stats.player_damage'].length - 1]\r\n      : player['stats.player_damage'] ?? 0;\r\n\r\n    const finalHealing = Array.isArray(player['stats.player_healing'])\r\n      ? player['stats.player_healing'][player['stats.player_healing'].length - 1]\r\n      : player['stats.player_healing'] ?? 0;\r\n\r\n    // Upsert into local DB\r\n    await db.query(\r\n      `\r\n      INSERT INTO PlayerMatchStats (\r\n        match_id, player_id, hero_id, souls, kills, deaths, assists,\r\n        damage_done, healing_done, result, team\r\n      )\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n      ON DUPLICATE KEY UPDATE\r\n        hero_id = VALUES(hero_id),\r\n        souls = VALUES(souls),\r\n        kills = VALUES(kills),\r\n        deaths = VALUES(deaths),\r\n        assists = VALUES(assists),\r\n        damage_done = VALUES(damage_done),\r\n        healing_done = VALUES(healing_done),\r\n        result = VALUES(result),\r\n        team = VALUES(team)\r\n      `,\r\n      [\r\n        player.match_id,\r\n        player.account_id,\r\n        player.hero_id,\r\n        player.net_worth ?? 0,\r\n        player.kills,\r\n        player.deaths,\r\n        player.assists,\r\n        finalDamage,\r\n        finalHealing,\r\n        player.won ? 1 : 0,\r\n        player.team ?? null,\r\n      ]\r\n    );\r\n\r\n    return new Response(JSON.stringify({ success: true, player }), { status: 200 });\r\n  } catch (err: any) {\r\n    console.error('Error in fetch-player-match-stats:', err);\r\n    return new Response(\r\n      JSON.stringify({ success: false, error: err.message }),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,oBAAoB;AAEnB,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,UAAU,aAAa,GAAG,CAAC;QACjC,MAAM,YAAY,aAAa,GAAG,CAAC;QAEnC,IAAI,CAAC,WAAW,CAAC,WAAW;YAC1B,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAiC,IACzE;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,mBAAmB,CAAC;;;;uBAIf,EAAE,QAAQ,kBAAkB,EAAE,UAAU;IAC3D,CAAC;QAED,MAAM,MAAM,GAAG,kBAAkB,OAAO,EAAE,OAAO;QACjD,QAAQ,GAAG,CAAC,aAAa;QAEzB,MAAM,MAAM,MAAM,MAAM;QACxB,IAAI,CAAC,IAAI,EAAE,EAAE;YACX,QAAQ,KAAK,CAAC,8BAA8B,IAAI,MAAM,EAAE,MAAM,IAAI,IAAI;YACtE,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,QAAQ,MAAM,IAAI,IAAI;QAE5B,IAAI,CAAC,MAAM,OAAO,CAAC,UAAU,MAAM,MAAM,KAAK,GAAG;YAC/C,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAuC,IAC/E;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,KAAK,CAAC,EAAE;QACvB,QAAQ,GAAG,CAAC,kBAAkB,KAAK,SAAS,CAAC,QAAQ,MAAM;QAE3D,4CAA4C;QAC5C,MAAM,cAAc,MAAM,OAAO,CAAC,MAAM,CAAC,sBAAsB,IAC3D,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,GAAG,EAAE,GACvE,MAAM,CAAC,sBAAsB,IAAI;QAErC,MAAM,eAAe,MAAM,OAAO,CAAC,MAAM,CAAC,uBAAuB,IAC7D,MAAM,CAAC,uBAAuB,CAAC,MAAM,CAAC,uBAAuB,CAAC,MAAM,GAAG,EAAE,GACzE,MAAM,CAAC,uBAAuB,IAAI;QAEtC,uBAAuB;QACvB,MAAM,+HAAE,CAAC,KAAK,CACZ,CAAC;;;;;;;;;;;;;;;;MAgBD,CAAC,EACD;YACE,OAAO,QAAQ;YACf,OAAO,UAAU;YACjB,OAAO,OAAO;YACd,OAAO,SAAS,IAAI;YACpB,OAAO,KAAK;YACZ,OAAO,MAAM;YACb,OAAO,OAAO;YACd;YACA;YACA,OAAO,GAAG,GAAG,IAAI;YACjB,OAAO,IAAI,IAAI;SAChB;QAGH,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAM;QAAO,IAAI;YAAE,QAAQ;QAAI;IAC/E,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,OAAO,IAAI,OAAO;QAAC,IACpD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}