{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/James/Documents/deadlock-stats/src/app/lib/db.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nexport const db = mysql.createPool({\r\n  host: process.env.DB_HOST || '127.0.0.1',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root1',\r\n  database: process.env.DB_NAME || 'deadlock_stats',\r\n  port: Number(process.env.DB_PORT) || 3306\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,KAAK,8IAAK,CAAC,UAAU,CAAC;IACjC,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,MAAM,OAAO,QAAQ,GAAG,CAAC,OAAO,KAAK;AACvC","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/James/Documents/deadlock-stats/src/app/api/seed-player/route.ts"],"sourcesContent":["// app/api/seed-player/route.ts\r\nimport { db } from '../../lib/db';\r\n\r\nconst DEADLOCK_API_BASE = 'https://api.deadlock-api.com/v1';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    let accountId = searchParams.get('account_id');\r\n\r\n    // Step 1: If no account_id, fetch one active player\r\n    if (!accountId) {\r\n      const matchesRes = await fetch(`${DEADLOCK_API_BASE}/matches/active`);\r\n      if (!matchesRes.ok) throw new Error('Failed to fetch active matches');\r\n\r\n      const matches = await matchesRes.json();\r\n      const playerIds: number[] = [];\r\n      for (const match of matches) {\r\n        if (match.players) {\r\n          for (const p of match.players) {\r\n            if (p.account_id) playerIds.push(p.account_id);\r\n          }\r\n        }\r\n        if (playerIds.length > 0) break; // limit to one player\r\n      }\r\n\r\n      if (playerIds.length === 0) throw new Error('No active player found');\r\n    const randomIndex = Math.floor(Math.random() * playerIds.length);\r\n    accountId = playerIds[randomIndex].toString();\r\n    \r\n    }\r\n\r\n    // Step 2: Fetch hero stats for the account\r\n    const heroStatsUrl = `${DEADLOCK_API_BASE}/players/hero-stats?account_ids=${accountId}`;\r\n    const heroStatsRes = await fetch(heroStatsUrl);\r\n    if (!heroStatsRes.ok) throw new Error('Failed to fetch hero stats');\r\n    const heroStats = await heroStatsRes.json();\r\n\r\n    // Step 3: Fetch Steam profile for the account\r\n    const steamUrl = `${DEADLOCK_API_BASE}/players/steam?account_ids=${accountId}`;\r\n    const steamRes = await fetch(steamUrl);\r\n    const steamProfiles = steamRes.ok ? await steamRes.json() : [];\r\n    const usernameMap: Record<number, string> = {};\r\n    for (const profile of steamProfiles) {\r\n      usernameMap[profile.account_id] = profile.personaname || 'Unknown';\r\n    }\r\n\r\n    // Step 4: Aggregate stats and upsert into Players table\r\n    let totalMatches = 0;\r\n    let totalWins = 0;\r\n    for (const hero of heroStats) {\r\n      totalMatches += hero.matches_played || 0;\r\n      totalWins += hero.wins || 0;\r\n    }\r\n    const totalLosses = totalMatches - totalWins;\r\n    const username = usernameMap[Number(accountId)] || 'Unknown';\r\n\r\n    await db.query(\r\n      `INSERT INTO Players (player_id, username, total_matches_played, total_wins, total_losses)\r\n       VALUES (?, ?, ?, ?, ?)\r\n       ON DUPLICATE KEY UPDATE\r\n         username = VALUES(username),\r\n         total_matches_played = VALUES(total_matches_played),\r\n         total_wins = VALUES(total_wins),\r\n         total_losses = VALUES(total_losses)`,\r\n      [Number(accountId), username, totalMatches, totalWins, totalLosses]\r\n    );\r\n\r\n    // Step 5: Fetch all match IDs for this player\r\n    const matchQuery = encodeURIComponent(`\r\n      SELECT DISTINCT match_id\r\n      FROM match_player\r\n      WHERE account_id = ${accountId}\r\n      LIMIT 5\r\n    `);\r\n    const matchesUrl = `${DEADLOCK_API_BASE}/sql?query=${matchQuery}`;\r\n    const matchesRes2 = await fetch(matchesUrl);\r\n    const text = await matchesRes2.text();\r\n\r\n    let matchIds: any[] = [];\r\n    try {\r\n      const parsed = JSON.parse(text);\r\n      if (Array.isArray(parsed)) {\r\n        matchIds = parsed;\r\n      } else if (parsed.rows && Array.isArray(parsed.rows)) {\r\n        matchIds = parsed.rows;\r\n      } else {\r\n        console.warn('Unexpected match IDs response:', parsed);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to parse matches JSON, raw response:', text);\r\n      throw new Error('Invalid JSON returned from Deadlock SQL endpoint');\r\n    }\r\n\r\n    // Step 6: Loop over matches and upsert into Matches and PlayerMatchStats\r\n    for (const matchRow of matchIds) {\r\n      const matchId = matchRow.match_id;\r\n      if (!matchId) continue;\r\n\r\n      // Fetch match info\r\n      const matchInfoQuery = encodeURIComponent(`\r\n        SELECT match_id, start_time, duration_s, match_outcome, match_mode, winning_team\r\n        FROM match_info\r\n        WHERE match_id = ${matchId}\r\n      `);\r\n      const matchInfoUrl = `${DEADLOCK_API_BASE}/sql?query=${matchInfoQuery}`;\r\n      const matchInfoRes = await fetch(matchInfoUrl);\r\n      const matchInfoArr = await matchInfoRes.json();\r\n      const match = matchInfoArr[0];\r\n      if (!match) continue;\r\n\r\n      await db.query(\r\n        `INSERT INTO Matches (match_id, start_time, duration_s, match_outcome, match_mode, winning_team)\r\n         VALUES (?, ?, ?, ?, ?, ?)\r\n         ON DUPLICATE KEY UPDATE\r\n           start_time = VALUES(start_time),\r\n           duration_s = VALUES(duration_s),\r\n           match_outcome = VALUES(match_outcome),\r\n           match_mode = VALUES(match_mode),\r\n           winning_team = VALUES(winning_team)`,\r\n        [match.match_id, match.start_time, match.duration_s, match.match_outcome, match.match_mode, match.winning_team]\r\n      );\r\n\r\n      // Fetch player stats for this match\r\n      const statsQuery = encodeURIComponent(`\r\n        SELECT match_id, account_id, hero_id, net_worth, kills, deaths, assists,\r\n               stats.player_damage, stats.player_healing, won, team\r\n        FROM match_player\r\n        WHERE match_id = ${matchId} AND account_id = ${accountId}\r\n      `);\r\n      const statsUrl = `${DEADLOCK_API_BASE}/sql?query=${statsQuery}`;\r\n      const statsRes = await fetch(statsUrl);\r\n      const statsArr = await statsRes.json();\r\n      if (!statsArr || statsArr.length === 0) continue;\r\n\r\n      const player = statsArr[0];\r\n\r\n      // Take only the top value for damage and healing\r\n        const maxDamage = Array.isArray(player['stats.player_damage'])\r\n        ? player['stats.player_damage'].slice(-1)[0]\r\n        : (player['stats.player_damage'] ?? 0);\r\n\r\n        const maxHealing = Array.isArray(player['stats.player_healing'])\r\n        ? player['stats.player_healing'].slice(-1)[0]\r\n        : (player['stats.player_healing'] ?? 0);\r\n\r\n\r\n      await db.query(\r\n        `INSERT INTO PlayerMatchStats\r\n          (match_id, player_id, hero_id, souls, kills, deaths, assists,\r\n           damage_done, healing_done, result, team)\r\n         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n         ON DUPLICATE KEY UPDATE\r\n           hero_id = VALUES(hero_id),\r\n           souls = VALUES(souls),\r\n           kills = VALUES(kills),\r\n           deaths = VALUES(deaths),\r\n           assists = VALUES(assists),\r\n           damage_done = VALUES(damage_done),\r\n           healing_done = VALUES(healing_done),\r\n           result = VALUES(result),\r\n           team = VALUES(team)`,\r\n        [\r\n          player.match_id,\r\n          player.account_id,\r\n          player.hero_id,\r\n          player.net_worth,\r\n          player.kills,\r\n          player.deaths,\r\n          player.assists,\r\n          maxDamage,\r\n          maxHealing,\r\n          player.won ? 1 : 0,\r\n          player.team,\r\n        ]\r\n      );\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true, account_id: Number(accountId) }), { status: 200 });\r\n  } catch (err: any) {\r\n    console.error('Error in seed-player endpoint:', err);\r\n    return new Response(JSON.stringify({ success: false, error: err.message }), { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAC/B;;AAEA,MAAM,oBAAoB;AAEnB,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,IAAI,YAAY,aAAa,GAAG,CAAC;QAEjC,oDAAoD;QACpD,IAAI,CAAC,WAAW;YACd,MAAM,aAAa,MAAM,MAAM,GAAG,kBAAkB,eAAe,CAAC;YACpE,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,MAAM;YAEpC,MAAM,UAAU,MAAM,WAAW,IAAI;YACrC,MAAM,YAAsB,EAAE;YAC9B,KAAK,MAAM,SAAS,QAAS;gBAC3B,IAAI,MAAM,OAAO,EAAE;oBACjB,KAAK,MAAM,KAAK,MAAM,OAAO,CAAE;wBAC7B,IAAI,EAAE,UAAU,EAAE,UAAU,IAAI,CAAC,EAAE,UAAU;oBAC/C;gBACF;gBACA,IAAI,UAAU,MAAM,GAAG,GAAG,OAAO,sBAAsB;YACzD;YAEA,IAAI,UAAU,MAAM,KAAK,GAAG,MAAM,IAAI,MAAM;YAC9C,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,UAAU,MAAM;YAC/D,YAAY,SAAS,CAAC,YAAY,CAAC,QAAQ;QAE3C;QAEA,2CAA2C;QAC3C,MAAM,eAAe,GAAG,kBAAkB,gCAAgC,EAAE,WAAW;QACvF,MAAM,eAAe,MAAM,MAAM;QACjC,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,IAAI,MAAM;QACtC,MAAM,YAAY,MAAM,aAAa,IAAI;QAEzC,8CAA8C;QAC9C,MAAM,WAAW,GAAG,kBAAkB,2BAA2B,EAAE,WAAW;QAC9E,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,gBAAgB,SAAS,EAAE,GAAG,MAAM,SAAS,IAAI,KAAK,EAAE;QAC9D,MAAM,cAAsC,CAAC;QAC7C,KAAK,MAAM,WAAW,cAAe;YACnC,WAAW,CAAC,QAAQ,UAAU,CAAC,GAAG,QAAQ,WAAW,IAAI;QAC3D;QAEA,wDAAwD;QACxD,IAAI,eAAe;QACnB,IAAI,YAAY;QAChB,KAAK,MAAM,QAAQ,UAAW;YAC5B,gBAAgB,KAAK,cAAc,IAAI;YACvC,aAAa,KAAK,IAAI,IAAI;QAC5B;QACA,MAAM,cAAc,eAAe;QACnC,MAAM,WAAW,WAAW,CAAC,OAAO,WAAW,IAAI;QAEnD,MAAM,+HAAE,CAAC,KAAK,CACZ,CAAC;;;;;;4CAMqC,CAAC,EACvC;YAAC,OAAO;YAAY;YAAU;YAAc;YAAW;SAAY;QAGrE,8CAA8C;QAC9C,MAAM,aAAa,mBAAmB,CAAC;;;yBAGlB,EAAE,UAAU;;IAEjC,CAAC;QACD,MAAM,aAAa,GAAG,kBAAkB,WAAW,EAAE,YAAY;QACjE,MAAM,cAAc,MAAM,MAAM;QAChC,MAAM,OAAO,MAAM,YAAY,IAAI;QAEnC,IAAI,WAAkB,EAAE;QACxB,IAAI;YACF,MAAM,SAAS,KAAK,KAAK,CAAC;YAC1B,IAAI,MAAM,OAAO,CAAC,SAAS;gBACzB,WAAW;YACb,OAAO,IAAI,OAAO,IAAI,IAAI,MAAM,OAAO,CAAC,OAAO,IAAI,GAAG;gBACpD,WAAW,OAAO,IAAI;YACxB,OAAO;gBACL,QAAQ,IAAI,CAAC,kCAAkC;YACjD;QACF,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,+CAA+C;YAC7D,MAAM,IAAI,MAAM;QAClB;QAEA,yEAAyE;QACzE,KAAK,MAAM,YAAY,SAAU;YAC/B,MAAM,UAAU,SAAS,QAAQ;YACjC,IAAI,CAAC,SAAS;YAEd,mBAAmB;YACnB,MAAM,iBAAiB,mBAAmB,CAAC;;;yBAGxB,EAAE,QAAQ;MAC7B,CAAC;YACD,MAAM,eAAe,GAAG,kBAAkB,WAAW,EAAE,gBAAgB;YACvE,MAAM,eAAe,MAAM,MAAM;YACjC,MAAM,eAAe,MAAM,aAAa,IAAI;YAC5C,MAAM,QAAQ,YAAY,CAAC,EAAE;YAC7B,IAAI,CAAC,OAAO;YAEZ,MAAM,+HAAE,CAAC,KAAK,CACZ,CAAC;;;;;;;8CAOqC,CAAC,EACvC;gBAAC,MAAM,QAAQ;gBAAE,MAAM,UAAU;gBAAE,MAAM,UAAU;gBAAE,MAAM,aAAa;gBAAE,MAAM,UAAU;gBAAE,MAAM,YAAY;aAAC;YAGjH,oCAAoC;YACpC,MAAM,aAAa,mBAAmB,CAAC;;;;yBAIpB,EAAE,QAAQ,kBAAkB,EAAE,UAAU;MAC3D,CAAC;YACD,MAAM,WAAW,GAAG,kBAAkB,WAAW,EAAE,YAAY;YAC/D,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,WAAW,MAAM,SAAS,IAAI;YACpC,IAAI,CAAC,YAAY,SAAS,MAAM,KAAK,GAAG;YAExC,MAAM,SAAS,QAAQ,CAAC,EAAE;YAE1B,iDAAiD;YAC/C,MAAM,YAAY,MAAM,OAAO,CAAC,MAAM,CAAC,sBAAsB,IAC3D,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,GACzC,MAAM,CAAC,sBAAsB,IAAI;YAEpC,MAAM,aAAa,MAAM,OAAO,CAAC,MAAM,CAAC,uBAAuB,IAC7D,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,GAC1C,MAAM,CAAC,uBAAuB,IAAI;YAGvC,MAAM,+HAAE,CAAC,KAAK,CACZ,CAAC;;;;;;;;;;;;;8BAaqB,CAAC,EACvB;gBACE,OAAO,QAAQ;gBACf,OAAO,UAAU;gBACjB,OAAO,OAAO;gBACd,OAAO,SAAS;gBAChB,OAAO,KAAK;gBACZ,OAAO,MAAM;gBACb,OAAO,OAAO;gBACd;gBACA;gBACA,OAAO,GAAG,GAAG,IAAI;gBACjB,OAAO,IAAI;aACZ;QAEL;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAM,YAAY,OAAO;QAAW,IAAI;YAAE,QAAQ;QAAI;IACtG,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAO,OAAO,IAAI,OAAO;QAAC,IAAI;YAAE,QAAQ;QAAI;IAC5F;AACF","debugId":null}}]
}